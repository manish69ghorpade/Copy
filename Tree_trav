//WAP to Create a binary tree form user provided values and display out in pre, post and in order traversal

#include <stdio.h>

#include <stdlib.h>

struct node

{

    int data;

    struct node *left;

    struct node *right;

};

struct node *newNode(int data)

{

    struct node *node = (struct node *)malloc(sizeof(struct node));

    node->data = data;

    node->left = NULL;

    node->right = NULL;

    return(node);

}

struct node* insert(struct node* node, int data)

{

    if(node==NULL)

    {

        return(newNode(data));

    }

    else

    {

     if(data<=node->data)

        node->left = insert(node->left, data);

     else

        node->right = insert(node->right, data);

     return(node);

    }

}

void inorder(struct node *node)

{

    if (node == NULL)

        return;

    inorder(node->left);

    printf("%d ", node->data);

    inorder(node->right);

}

void postorder(struct node *node)

{

    if (node == NULL)

        return;

    printf("%d ", node->data);

    postorder(node->left);

    postorder(node->right);

}

void preorder(struct node *node)

{

    if (node == NULL)

        return;

    preorder(node->left);

    preorder(node->right);

    printf("%d ", node->data);

}

int main()

{

    struct node *root=NULL;

    int n,i,data;

    printf("enter the amount nodes to enter");

    scanf("%d",&n);

    printf("enter the value:");

    for(i=0;i<n;i++)

    {

        scanf("%d",&data);

        root=insert(root,data);

    }

    printf("\nInorder traversal of binary tree is \n");

    inorder(root);

    printf("\npreorder traversal of binary tree is \n");

    preorder(root);

    printf("\npostorder traversal of binary tree is \n");

    postorder(root);

    return 0;

}
